trigger:
- master

variables:
  sdkVersion: '3.0.100-rc1-014190'
  solution: 'TsinghuaNet.sln'
  xfSolution: 'TsinghuaNet.XF.sln'
  libProject: 'TsinghuaNet/TsinghuaNet.csproj'
  cliProject: 'TsinghuaNet.CLI/TsinghuaNet.CLI.csproj'
  etoProject: 'TsinghuaNet.Eto/TsinghuaNet.Eto/TsinghuaNet.Eto.csproj'
  wpfProject: 'TsinghuaNet.Eto/TsinghuaNet.Eto.Wpf/TsinghuaNet.Eto.Wpf.csproj'
  gtkProject: 'TsinghuaNet.Eto/TsinghuaNet.Eto.Gtk/TsinghuaNet.Eto.Gtk.csproj'
  macProject: 'TsinghuaNet.Eto/TsinghuaNet.Eto.Mac/TsinghuaNet.Eto.Mac.csproj'
  uwpProject: 'TsinghuaNet.XF/TsinghuaNet.XF.UWP/TsinghuaNet.XF.UWP.csproj'
  droidProject: 'TsinghuaNet.XF/TsinghuaNet.XF.Android/TsinghuaNet.XF.Android.csproj'

jobs:
- job: Windows_CLI
  pool:
    vmImage: 'windows-2019'
  steps:
  - task: UseDotNet@2
    displayName: 'Install .NET Core SDK 3.0'
    inputs:
      packageType: sdk
      version: '$(sdkVersion)'

  - task: DotNetCoreCLI@2
    displayName: 'Restore project'
    inputs:
      projects: '$(cliProject)'
      command: restore
      feedsToUse: config
      nugetConfigPath: NuGet.Config

  - script: dotnet publish $(cliProject) -r win-x64 -c Release -o build\win-x64
    displayName: 'Publish project'

  - script: del build\win-x64\*.pdb
    displayName: 'Remove PDBs'

  - script: del build\win-x64\*.json
    displayName: 'Remove JSONs'

  - task: ArchiveFiles@2
    displayName: 'Archive'
    inputs:
      rootFolderOrFile: 'build\win-x64'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)\TsinghuaNet.CLI.Win64.zip'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish'
    inputs:
      artifactName: 'publish'

- job: Linux_CLI
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - task: UseDotNet@2
    displayName: 'Install .NET Core SDK 3.0'
    inputs:
      packageType: sdk
      version: '$(sdkVersion)'

  - task: DotNetCoreCLI@2
    displayName: 'Restore project'
    inputs:
      projects: '$(cliProject)'
      command: restore
      feedsToUse: config
      nugetConfigPath: NuGet.Config
      
  - script: |
      wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
      sudo apt-add-repository "deb https://apt.llvm.org/xenial/ llvm-toolchain-xenial-3.9 main"
      sudo apt -o Acquire::AllowInsecureRepositories=true update && sudo apt-get install clang-3.9 lldb-3.9 comerr-dev krb5-multidev libgssrpc4 libkadm5clnt-mit9 libkadm5srv-mit9 libkdb5-8 libkrb5-dev
      sudo ln /usr/lib/x86_64-linux-gnu/libgssapi_krb5.so.2 /usr/lib/libgssapi_krb5.so
    displayName: 'Install clang-3.7'

  - script: dotnet publish $(cliProject) -r linux-x64 -c Release -o build/linux-x64
    displayName: 'Publish project'

  - script: strip build/linux-x64/TsinghuaNet.CLI
    displayName: 'Strip'

  - script: rm build/linux-x64/*.pdb
    displayName: 'Remove PDBs'

  - script: rm build/linux-x64/*.json
    displayName: 'Remove JSONs'

  - task: ArchiveFiles@2
    displayName: 'Archive'
    inputs:
      rootFolderOrFile: 'build/linux-x64'
      includeRootFolder: false
      archiveType: 'tar'
      tarCompression: 'gz'
      archiveFile: '$(Build.ArtifactStagingDirectory)/TsinghuaNet.CLI.Linux64.tar.gz'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish'
    inputs:
      artifactName: 'publish'

- job: MacOS_CLI
  pool:
    vmImage: 'macOS-10.14'
  steps:
  - task: UseDotNet@2
    displayName: 'Install .NET Core SDK 3.0'
    inputs:
      packageType: sdk
      version: '$(sdkVersion)'

  - task: DotNetCoreCLI@2
    displayName: 'Restore project'
    inputs:
      projects: '$(cliProject)'
      command: restore
      feedsToUse: config
      nugetConfigPath: NuGet.Config

  - script: dotnet publish $(cliProject) -r osx-x64 -c Release -o build/osx-x64
    displayName: 'Publish project'
  
  - script: strip build/osx-x64/TsinghuaNet.CLI
    displayName: 'Strip'

  - script: rm build/osx-x64/*.pdb
    displayName: 'Remove PDBs'

  - script: rm build/osx-x64/*.json
    displayName: 'Remove JSONs'

  - task: ArchiveFiles@2
    displayName: 'Archive'
    inputs:
      rootFolderOrFile: 'build/osx-x64'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/TsinghuaNet.CLI.OSX64.zip'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish'
    inputs:
      artifactName: 'publish'

- job: Windows_Eto
  pool:
    vmImage: 'windows-2019'
  steps:
  - task: UseDotNet@2
    displayName: 'Install .NET Core SDK 3.0'
    inputs:
      packageType: sdk
      version: '$(sdkVersion)'

  - task: DotNetCoreCLI@2
    displayName: 'Restore project'
    inputs:
      projects: '$(wpfProject)'
      command: restore
      feedsToUse: config
      nugetConfigPath: NuGet.Config
  
  - script: dotnet publish $(wpfProject) -r win-x64 -c Release -f net48 -o build\eto.wpf\net48
    displayName: 'Publish project as net48'

  - script: del build\eto.wpf\net48\*.pdb
    displayName: 'Remove PDBs'

  - task: ArchiveFiles@2
    displayName: 'Archive'
    inputs:
      rootFolderOrFile: 'build\eto.wpf\net48'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)\TsinghuaNet.Eto.Wpf.Fx.zip'

  - script: dotnet publish $(wpfProject) -r win-x64 -f netcoreapp3.0 -o build\eto.wpf\netcoreapp3.0
    displayName: 'Publish project as netcoreapp3.0'

  - script: del build\eto.wpf\netcoreapp3.0\*.pdb
    displayName: 'Remove PDBs'

  - pwsh: ls build\eto.wpf\netcoreapp3.0\ -Exclude zh-Hans -Attributes Directory | rm -Recurse -Force
    displayName: 'Remove other locale resources'

  - task: ArchiveFiles@2
    displayName: 'Archive'
    inputs:
      rootFolderOrFile: 'build\eto.wpf\netcoreapp3.0'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)\TsinghuaNet.Eto.Wpf.CoreFx.zip'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish'
    inputs:
      artifactName: 'publish'

- job: Linux_Eto
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - task: UseDotNet@2
    displayName: 'Install .NET Core SDK 3.0'
    inputs:
      packageType: sdk
      version: '$(sdkVersion)'

  - task: DotNetCoreCLI@2
    displayName: 'Restore project'
    inputs:
      projects: '$(gtkProject)'
      command: restore
      feedsToUse: config
      nugetConfigPath: NuGet.Config
  
  - script: dotnet publish $(gtkProject) -r linux-x64 -c Release -o build/eto.gtk /p:PublishTrimmed=true
    displayName: 'Publish project'

  - script: rm build/eto.gtk/*.pdb
    displayName: 'Remove PDBs'

  - task: ArchiveFiles@2
    displayName: 'Archive'
    inputs:
      rootFolderOrFile: 'build/eto.gtk'
      includeRootFolder: false
      archiveType: 'tar'
      tarCompression: 'gz'
      archiveFile: '$(Build.ArtifactStagingDirectory)/TsinghuaNet.Eto.Gtk.tar.gz'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish'
    inputs:
      artifactName: 'publish'

- job: MacOS_Eto
  pool:
    vmImage: 'macOS-10.14'
  steps:
  - task: UseDotNet@2
    displayName: 'Install .NET Core SDK 3.0'
    inputs:
      packageType: sdk
      version: '$(sdkVersion)'

  - task: DotNetCoreCLI@2
    displayName: 'Restore project'
    inputs:
      projects: '$(macProject)'
      command: restore
      feedsToUse: config
      nugetConfigPath: NuGet.Config

  - script: dotnet build $(macProject) -c Release
    displayName: 'Build project'

  - task: ArchiveFiles@2
    displayName: 'Archive'
    inputs:
      rootFolderOrFile: '$(build.sourcesdirectory)/TsinghuaNet.Eto/TsinghuaNet.Eto.Mac/bin/Release/net48/TsinghuaNet.Eto.Mac.app/'
      includeRootFolder: true
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/TsinghuaNet.Eto.Mac.app.zip'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish'
    inputs:
      artifactName: 'publish'

- job: Windows_XF_UWP
  pool:
    vmImage: 'windows-2019'
  steps:
  - task: NuGetToolInstaller@0
    displayName: 'Install NuGet 5.2.0'
    inputs:
      versionSpec: '5.2.0'

  - task: UseDotNet@2
    displayName: 'Install .NET Core SDK 3.0'
    inputs:
      packageType: sdk
      version: '$(sdkVersion)'

  - task: NuGetCommand@2
    displayName: 'Restore solution'
    inputs:
      restoreSolution: '$(solution)'
      feedsToUse: config
      nugetConfigPath: 'NuGet.Config'

  - task: MSBuild@1
    displayName: 'Build app bundle'
    inputs:
      solution: '$(uwpProject)'
      configuration: 'Release'
      msbuildArguments: '/p:AppxBundlePlatforms="x86|x64" /p:AppxPackageDir="..\..\build\uwp" /p:AppxBundle=Always /p:UapAppxPackageBuildMode=SideloadOnly'

  - pwsh: rm build\uwp\*\Dependencies\ARM* -Force -Recurse
    displayName: 'Remove ARM/ARM64 dependencies'

  - pwsh: ls build\uwp\*\Add-AppDevPackage.resources\ -Exclude zh-CN -Attributes Directory | rm -Recurse -Force
    displayName: 'Remove other locale resources for install script'

  - task: ArchiveFiles@2
    displayName: 'Archive'
    inputs:
      rootFolderOrFile: 'build\uwp'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)\TsinghuaNet.XF.UWP.zip'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish'
    inputs:
      artifactName: 'publish'

- job: Windows_XF_Android
  pool:
    vmImage: 'windows-2019'
  variables:
    ANDROID_NDK_HOME: C:\Microsoft\AndroidNDK64\android-ndk-r16b
    ANDROID_NDK_PATH: C:\Microsoft\AndroidNDK64\android-ndk-r16b
    AndroidNdkDirectory: C:\Microsoft\AndroidNDK64\android-ndk-r16b
  steps:
  - task: NuGetToolInstaller@0
    displayName: 'Install NuGet 5.2.0'
    inputs:
      versionSpec: '5.2.0'

  - task: UseDotNet@2
    displayName: 'Install .NET Core SDK 3.0'
    inputs:
      packageType: sdk
      version: '$(sdkVersion)'

  - task: NuGetCommand@2
    displayName: 'Restore solution'
    inputs:
      restoreSolution: '$(solution)'
      feedsToUse: config
      nugetConfigPath: 'NuGet.Config'

  - task: MSBuild@1
    displayName: 'Build apk'
    inputs:
      solution: '$(droidProject)'
      configuration: 'Release'
      msbuildArguments: '/r /t:SignAndroidPackage /p:JavaSdkDirectory="%JAVA_HOME%" /p:AndroidSigningKeyPass=$(key-password) /p:AndroidSigningStorePass=$(keystore-password)'

  - task: CopyFiles@2
    displayName: 'Publish Android Binaries'
    inputs:
      SourceFolder: $(build.sourcesdirectory)/TsinghuaNet.XF/TsinghuaNet.XF.Android/bin/Release
      Contents: '**/*-Signed.apk'
      TargetFolder: $(build.artifactstagingdirectory)
      CleanTargetFolder: false
      OverWrite: false
      flattenFolders: false

  - task: PublishBuildArtifacts@1
    displayName: 'Publish'
    inputs:
      artifactName: 'publish'
