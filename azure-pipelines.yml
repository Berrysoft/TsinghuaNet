trigger:
- master

variables:
  sdkVersion: '3.1.100'
  solution: 'TsinghuaNet.sln'
  cliProject: 'TsinghuaNet.CLI/TsinghuaNet.CLI.csproj'
  nativeProject: 'TsinghuaNet.Native/TsinghuaNet.Native.csproj'
  wpfProject: 'TsinghuaNet.Eto/TsinghuaNet.Eto.Wpf/TsinghuaNet.Eto.Wpf.csproj'
  gtkProject: 'TsinghuaNet.Eto/TsinghuaNet.Eto.Gtk/TsinghuaNet.Eto.Gtk.csproj'
  macProject: 'TsinghuaNet.Eto/TsinghuaNet.Eto.Mac/TsinghuaNet.Eto.Mac.csproj'
  uwpProject: 'TsinghuaNet.XF/TsinghuaNet.XF.UWP/TsinghuaNet.XF.UWP.csproj'
  droidProject: 'TsinghuaNet.XF/TsinghuaNet.XF.Android/TsinghuaNet.XF.Android.csproj'

jobs:
- job: CLI
  strategy:
    matrix:
      windows:
        imageName: 'windows-latest'
        rid: win-x64
        suffix: Win64
      linux:
        imageName: 'ubuntu-latest'
        rid: linux-x64
        suffix: Linux64
      mac:
        imageName: 'macos-latest'
        rid: osx-x64
        suffix: OSX64
  pool:
    vmImage: $(imageName)
  
  steps:
  - task: UseDotNet@2
    displayName: 'Install .NET Core SDK 3.1'
    inputs:
      packageType: sdk
      version: '$(sdkVersion)'
      includePreviewVersions: true

  - script: |
      wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
      sudo apt-add-repository "deb https://apt.llvm.org/bionic/ llvm-toolchain-bionic-3.9 main"
      sudo apt -o Acquire::AllowInsecureRepositories=true update && sudo apt-get install clang-3.9 lldb-3.9 krb5-multidev
      sudo ln /usr/lib/x86_64-linux-gnu/mit-krb5/libgssapi_krb5.so /usr/lib/libgssapi_krb5.so
    condition: eq(variables.rid, 'linux-x64')
    displayName: 'Install clang-3.9'

  - task: DotNetCoreCLI@2
    displayName: 'Restore project'
    inputs:
      projects: '$(cliProject)'
      command: restore
      feedsToUse: config
      nugetConfigPath: NuGet.Config

  - script: dotnet publish $(cliProject) -r win-x64 -c Release -f net48 -o build\net48
    condition: eq(variables.rid, 'win-x64')
    displayName: 'Publish project as net48'

  - task: ArchiveFiles@2
    condition: eq(variables.rid, 'win-x64')
    displayName: 'Archive'
    inputs:
      rootFolderOrFile: 'build\net48'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)\TsinghuaNet.CLI.Fx.zip'

  - script: dotnet publish $(cliProject) -r $(rid) -c Release -f netcoreapp3.1 -o build/netcoreapp3.1
    displayName: 'Publish project as netcoreapp3.1'

  - script: del build\netcoreapp3.1\*.pdb
    condition: eq(variables.rid, 'win-x64')
    displayName: 'Remove PDBs'

  - script: del build\netcoreapp3.1\*.json
    condition: eq(variables.rid, 'win-x64')
    displayName: 'Remove JSONs'

  - script: strip build/netcoreapp3.1/TsinghuaNet.CLI
    condition: ne(variables.rid, 'win-x64')
    displayName: 'Strip'

  - script: rm build/netcoreapp3.1/*.pdb
    condition: ne(variables.rid, 'win-x64')
    displayName: 'Remove PDBs'

  - script: rm build/netcoreapp3.1/*.json
    condition: ne(variables.rid, 'win-x64')
    displayName: 'Remove JSONs'

  - task: ArchiveFiles@2
    condition: ne(variables.rid, 'linux-x64')
    displayName: 'Archive'
    inputs:
      rootFolderOrFile: 'build/netcoreapp3.1'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/TsinghuaNet.CLI.$(suffix).zip'

  - task: ArchiveFiles@2
    condition: eq(variables.rid, 'linux-x64')
    displayName: 'Archive'
    inputs:
      rootFolderOrFile: 'build/netcoreapp3.1'
      includeRootFolder: false
      archiveType: 'tar'
      tarCompression: 'gz'
      archiveFile: '$(Build.ArtifactStagingDirectory)/TsinghuaNet.CLI.$(suffix).tar.gz'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish'
    inputs:
      artifactName: 'publish'

- job: Native
  strategy:
    matrix:
      windows:
        imageName: 'windows-latest'
        rid: win-x64
        suffix: Win64
      linux:
        imageName: 'ubuntu-latest'
        rid: linux-x64
        suffix: Linux64
      # mac:
      #   imageName: 'macos-latest'
      #   rid: osx-x64
      #   suffix: OSX64
  pool:
    vmImage: $(imageName)

  steps:
  - task: UseDotNet@2
    displayName: 'Install .NET Core SDK 3.1'
    inputs:
      packageType: sdk
      version: '$(sdkVersion)'
      includePreviewVersions: true

  - script: |
      wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
      sudo apt-add-repository "deb https://apt.llvm.org/bionic/ llvm-toolchain-bionic-3.9 main"
      sudo apt -o Acquire::AllowInsecureRepositories=true update && sudo apt-get install clang-3.9 lldb-3.9 krb5-multidev
      sudo ln /usr/lib/x86_64-linux-gnu/mit-krb5/libgssapi_krb5.so /usr/lib/libgssapi_krb5.so
    condition: eq(variables.rid, 'linux-x64')
    displayName: 'Install clang-3.9'

  - task: DotNetCoreCLI@2
    displayName: 'Restore project'
    inputs:
      projects: '$(nativeProject)'
      command: restore
      feedsToUse: config
      nugetConfigPath: NuGet.Config

  - script: dotnet publish $(nativeProject) -r $(rid) -c Release -o build/lib
    displayName: 'Publish project'

  - script: del build\lib\*.json
    condition: eq(variables.rid, 'win-x64')
    displayName: 'Remove JSONs'

  - script: rm build/lib/*.json
    condition: ne(variables.rid, 'win-x64')
    displayName: 'Remove JSONs'

  - task: CopyFiles@2
    displayName: 'Copy headers'
    inputs:
      SourceFolder: $(build.sourcesdirectory)/TsinghuaNet.Native/include
      Contents: '*'
      TargetFolder: build/lib/include
      CleanTargetFolder: false
      OverWrite: false
      flattenFolders: false

  - task: ArchiveFiles@2
    condition: ne(variables.rid, 'linux-x64')
    displayName: 'Archive'
    inputs:
      rootFolderOrFile: 'build/lib'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/TsinghuaNet.Native.$(suffix).zip'

  - task: ArchiveFiles@2
    condition: eq(variables.rid, 'linux-x64')
    displayName: 'Archive'
    inputs:
      rootFolderOrFile: 'build/lib'
      includeRootFolder: false
      archiveType: 'tar'
      tarCompression: 'gz'
      archiveFile: '$(Build.ArtifactStagingDirectory)/TsinghuaNet.Native.$(suffix).tar.gz'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish'
    inputs:
      artifactName: 'publish'

- job: Eto
  strategy:
    matrix:
      windows:
        imageName: 'windows-latest'
        rid: win-x64
        suffix: Wpf
        project: $(wpfProject)
      linux:
        imageName: 'ubuntu-latest'
        rid: linux-x64
        suffix: Gtk
        project: $(gtkProject)
      mac:
        imageName: 'macos-latest'
        rid: osx-x64
        suffix: Mac
        project: $(macProject)
  pool:
    vmImage: $(imageName)
  
  steps:
  - task: UseDotNet@2
    displayName: 'Install .NET Core SDK 3.1'
    inputs:
      packageType: sdk
      version: '$(sdkVersion)'
      includePreviewVersions: true

  - task: DotNetCoreCLI@2
    displayName: 'Restore project'
    inputs:
      projects: '$(project)'
      command: restore
      feedsToUse: config
      nugetConfigPath: NuGet.Config

  - script: dotnet publish $(project) -r $(rid) -c Release -f net48 -o build/net48
    condition: eq(variables.rid, 'win-x64')
    displayName: 'Publish project as net48'

  - task: ArchiveFiles@2
    condition: eq(variables.rid, 'win-x64')
    displayName: 'Archive'
    inputs:
      rootFolderOrFile: 'build/net48'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/TsinghuaNet.Eto.$(suffix).Fx.zip'

  - script: dotnet publish $(project) -r $(rid) -c Release -f netcoreapp3.1 -o build/netcoreapp3.1 -p:PublishSingleFile=true
    condition: ne(variables.rid, 'osx-x64')
    displayName: 'Publish project as netcoreapp3.1'

  - task: ArchiveFiles@2
    condition: eq(variables.rid, 'win-x64')
    displayName: 'Archive'
    inputs:
      rootFolderOrFile: 'build/netcoreapp3.1'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/TsinghuaNet.Eto.$(suffix).CoreFx.zip'

  - task: ArchiveFiles@2
    condition: eq(variables.rid, 'linux-x64')
    displayName: 'Archive'
    inputs:
      rootFolderOrFile: 'build/netcoreapp3.1'
      includeRootFolder: false
      archiveType: 'tar'
      tarCompression: 'gz'
      archiveFile: '$(Build.ArtifactStagingDirectory)/TsinghuaNet.Eto.$(suffix).CoreFx.tar.gz'

  - script: dotnet publish $(project) -r $(rid) -c Release -f netcoreapp3.1 -o build/netcoreapp3.1.dep -p:PublishSingleFile=true --self-contained false
    condition: ne(variables.rid, 'osx-x64')
    displayName: 'Publish project as netcoreapp3.1 fx dependent'

  - task: ArchiveFiles@2
    condition: eq(variables.rid, 'win-x64')
    displayName: 'Archive'
    inputs:
      rootFolderOrFile: 'build/netcoreapp3.1.dep'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/TsinghuaNet.Eto.$(suffix).CoreFx.Dep.zip'

  - task: ArchiveFiles@2
    condition: eq(variables.rid, 'linux-x64')
    displayName: 'Archive'
    inputs:
      rootFolderOrFile: 'build/netcoreapp3.1.dep'
      includeRootFolder: false
      archiveType: 'tar'
      tarCompression: 'gz'
      archiveFile: '$(Build.ArtifactStagingDirectory)/TsinghuaNet.Eto.$(suffix).CoreFx.Dep.tar.gz'

  - script: dotnet build $(project) -r $(rid) -c Release
    condition: eq(variables.rid, 'osx-x64')
    displayName: 'Build project'

  - task: ArchiveFiles@2
    condition: eq(variables.rid, 'osx-x64')
    displayName: 'Archive'
    inputs:
      rootFolderOrFile: '$(build.sourcesdirectory)/TsinghuaNet.Eto/TsinghuaNet.Eto.Mac/bin/Release/netcoreapp3.1/$(rid)/TsinghuaNet.Eto.Mac.app/'
      includeRootFolder: true
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/TsinghuaNet.Eto.Mac.app.zip'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish'
    inputs:
      artifactName: 'publish'

- job: Windows_XF_UWP
  pool:
    vmImage: 'windows-latest'
  steps:
  - task: NuGetToolInstaller@0
    displayName: 'Install NuGet 5.2.0'
    inputs:
      versionSpec: '5.2.0'

  - task: UseDotNet@2
    displayName: 'Install .NET Core SDK 3.1'
    inputs:
      packageType: sdk
      version: '$(sdkVersion)'
      includePreviewVersions: true

  - task: NuGetCommand@2
    displayName: 'Restore solution'
    inputs:
      restoreSolution: '$(solution)'
      feedsToUse: config
      nugetConfigPath: 'NuGet.Config'
    env:
      MSBuildSDKsPath: $(Agent.ToolsDirectory)/dotnet/sdk/$(sdkVersion)/Sdks

  - task: MSBuild@1
    displayName: 'Build app bundle'
    inputs:
      solution: '$(uwpProject)'
      configuration: 'Release'
      msbuildArguments: '/p:AppxBundlePlatforms="x86|x64" /p:AppxPackageDir="..\..\build\uwp" /p:AppxBundle=Always /p:UapAppxPackageBuildMode=SideloadOnly'
    env:
      MSBuildSDKsPath: $(Agent.ToolsDirectory)/dotnet/sdk/$(sdkVersion)/Sdks

  - pwsh: rm build\uwp\*\Dependencies\ARM* -Force -Recurse
    displayName: 'Remove ARM/ARM64 dependencies'

  - pwsh: ls build\uwp\*\Add-AppDevPackage.resources\ -Exclude zh-CN -Attributes Directory | rm -Recurse -Force
    displayName: 'Remove other locale resources for install script'

  - task: ArchiveFiles@2
    displayName: 'Archive'
    inputs:
      rootFolderOrFile: 'build\uwp'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)\TsinghuaNet.XF.UWP.zip'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish'
    inputs:
      artifactName: 'publish'

- job: Windows_XF_Android
  pool:
    vmImage: 'windows-latest'
  variables:
    ANDROID_NDK_HOME: C:\Microsoft\AndroidNDK64\android-ndk-r16b
    ANDROID_NDK_PATH: C:\Microsoft\AndroidNDK64\android-ndk-r16b
    AndroidNdkDirectory: C:\Microsoft\AndroidNDK64\android-ndk-r16b
  steps:
  - task: NuGetToolInstaller@0
    displayName: 'Install NuGet 5.2.0'
    inputs:
      versionSpec: '5.2.0'

  - task: UseDotNet@2
    displayName: 'Install .NET Core SDK 3.1'
    inputs:
      packageType: sdk
      version: '$(sdkVersion)'
      includePreviewVersions: true

  - task: NuGetCommand@2
    displayName: 'Restore solution'
    inputs:
      restoreSolution: '$(solution)'
      feedsToUse: config
      nugetConfigPath: 'NuGet.Config'
    env:
      MSBuildSDKsPath: $(Agent.ToolsDirectory)/dotnet/sdk/$(sdkVersion)/Sdks

  - task: MSBuild@1
    displayName: 'Build apk'
    inputs:
      solution: '$(droidProject)'
      configuration: 'Release'
      msbuildArguments: '/r /t:SignAndroidPackage /p:JavaSdkDirectory="%JAVA_HOME%" /p:AndroidSigningKeyPass=$(key-password) /p:AndroidSigningStorePass=$(keystore-password)'
    env:
      MSBuildSDKsPath: $(Agent.ToolsDirectory)/dotnet/sdk/$(sdkVersion)/Sdks

  - task: CopyFiles@2
    displayName: 'Publish Android Binaries'
    inputs:
      SourceFolder: $(build.sourcesdirectory)/TsinghuaNet.XF/TsinghuaNet.XF.Android/bin/Release
      Contents: '**/*-Signed.apk'
      TargetFolder: $(build.artifactstagingdirectory)
      CleanTargetFolder: false
      OverWrite: false
      flattenFolders: false

  - task: PublishBuildArtifacts@1
    displayName: 'Publish'
    inputs:
      artifactName: 'publish'
