trigger:
- master

variables:
  sdkVersion: '3.0.100-preview6-012264'
  unoSolution: 'TsinghuaNet.Uno.sln'
  libProject: 'TsinghuaNet/TsinghuaNet.csproj'
  cliProject: 'TsinghuaNet.CLI/TsinghuaNet.CLI.csproj'
  wpfProject: 'TsinghuaNet.Eto/TsinghuaNet.Eto.Wpf/TsinghuaNet.Eto.Wpf.csproj'
  gtkProject: 'TsinghuaNet.Eto/TsinghuaNet.Eto.Gtk/TsinghuaNet.Eto.Gtk.csproj'
  macProject: 'TsinghuaNet.Eto/TsinghuaNet.Eto.Mac/TsinghuaNet.Eto.Mac.csproj'

jobs:
- job: Linux_CLI
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - task: DotNetCoreInstaller@0
    inputs:
      version: '$(sdkVersion)'

  - task: DotNetCoreCLI@2
    inputs:
      projects: '$(cliProject)'
      command: restore
      feedsToUse: config
      nugetConfigPath: NuGet.Config
      
  - script: wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add - && sudo apt-add-repository "deb https://apt.llvm.org/xenial/ llvm-toolchain-xenial-3.9 main" && sudo apt -o Acquire::AllowInsecureRepositories=true update && sudo apt-get install clang-3.9 lldb-3.9 comerr-dev krb5-multidev libgssrpc4 libkadm5clnt-mit9 libkadm5srv-mit9 libkdb5-8 libkrb5-dev && sudo ln /usr/lib/x86_64-linux-gnu/libgssapi_krb5.so.2 /usr/lib/libgssapi_krb5.so
  - script: dotnet publish $(cliProject) -r linux-x64 -c Release --output build/linux-x64
  - script: strip build/linux-x64/TsinghuaNet.CLI
  - script: rm build/linux-x64/*.pdb

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: 'build/linux-x64'
      includeRootFolder: false
      archiveType: 'tar'
      tarCompression: 'gz'
      archiveFile: '$(Build.ArtifactStagingDirectory)/TsinghuaNet.CLI.Linux64.tar.gz'

  - task: PublishBuildArtifacts@1
    inputs:
      artifactName: 'publish'

- job: MacOS_CLI
  pool:
    vmImage: 'macOS-10.14'
  steps:
  - task: DotNetCoreInstaller@0
    inputs:
      version: '$(sdkVersion)'

  - task: DotNetCoreCLI@2
    inputs:
      projects: '$(cliProject)'
      command: restore
      feedsToUse: config
      nugetConfigPath: NuGet.Config

  - script: dotnet publish $(cliProject) -r osx-x64 -c Release --output build/osx-x64
  - script: strip build/osx-x64/TsinghuaNet.CLI
  - script: rm build/osx-x64/*.pdb

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: 'build/osx-x64'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/TsinghuaNet.CLI.OSX64.zip'

  - task: PublishBuildArtifacts@1
    inputs:
      artifactName: 'publish'

- job: Windows_CLI
  pool:
    vmImage: 'windows-2019'
  steps:
  - task: DotNetCoreInstaller@0
    inputs:
      version: '$(sdkVersion)'

  - task: DotNetCoreCLI@2
    inputs:
      projects: '$(cliProject)'
      command: restore
      feedsToUse: config
      nugetConfigPath: NuGet.Config

  - script: dotnet publish $(cliProject) -r win-x64 -c Release --output build\win-x64
  - script: del build\win-x64\*.pdb

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: 'build\win-x64'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)\TsinghuaNet.CLI.Win64.zip'

  - task: PublishBuildArtifacts@1
    inputs:
      artifactName: 'publish'

- job: Windows_Eto
  pool:
    vmImage: 'windows-2019'
  steps:
  - task: DotNetCoreInstaller@0
    inputs:
      version: '$(sdkVersion)'

  - task: DotNetCoreCLI@2
    inputs:
      projects: '$(wpfProject)'
      command: restore
      feedsToUse: config
      nugetConfigPath: NuGet.Config
  
  - script: dotnet publish $(wpfProject) -r win-x64 -c Release -f net48 --output build\eto.wpf\net48
  - script: del build\eto.wpf\net48\*.pdb
  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: 'build\eto.wpf\net48'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)\TsinghuaNet.Eto.Wpf.Fx.zip'

  - script: dotnet publish $(wpfProject) -r win-x64 -c Release -f netcoreapp3.0 --self-contained false --output build\eto.wpf\netcoreapp3.0\dep
  - script: del build\eto.wpf\netcoreapp3.0\dep\*.pdb
  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: 'build\eto.wpf\netcoreapp3.0\dep'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)\TsinghuaNet.Eto.Wpf.CoreFx.Dependent.zip'

  - script: dotnet publish $(wpfProject) -r win-x64 -c Release -f netcoreapp3.0 --output build\eto.wpf\netcoreapp3.0\self
  - script: del build\eto.wpf\netcoreapp3.0\self\*.pdb
  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: 'build\eto.wpf\netcoreapp3.0\self'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)\TsinghuaNet.Eto.Wpf.CoreFx.Self.zip'

  - task: PublishBuildArtifacts@1
    inputs:
      artifactName: 'publish'

- job: Linux_Eto
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - task: DotNetCoreInstaller@0
    inputs:
      version: '$(sdkVersion)'

  - task: DotNetCoreCLI@2
    inputs:
      projects: '$(gtkProject)'
      command: restore
      feedsToUse: config
      nugetConfigPath: NuGet.Config
  
  - script: dotnet publish $(gtkProject) -r linux-x64 -c Release --self-contained false --output build/eto.gtk/dep
  - script: rm build/eto.gtk/dep/*.pdb
  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: 'build/eto.gtk/dep'
      includeRootFolder: false
      archiveType: 'tar'
      tarCompression: 'gz'
      archiveFile: '$(Build.ArtifactStagingDirectory)/TsinghuaNet.Eto.Gtk.Dependent.tar.gz'

  - script: dotnet publish $(gtkProject) -r linux-x64 -c Release --output build/eto.gtk/self
  - script: rm build/eto.gtk/self/*.pdb
  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: 'build/eto.gtk/self'
      includeRootFolder: false
      archiveType: 'tar'
      tarCompression: 'gz'
      archiveFile: '$(Build.ArtifactStagingDirectory)/TsinghuaNet.Eto.Gtk.Self.tar.gz'

  - task: PublishBuildArtifacts@1
    inputs:
      artifactName: 'publish'

- job: Windows_Uno
  pool:
    vmImage: 'windows-2019'
  steps:
  - task: NuGetToolInstaller@0
    inputs:
      versionSpec: '5.1.0'
  
  - task: NuGetCommand@2
    inputs:
      restoreSolution: '$(unoSolution)'
      feedsToUse: config
      nugetConfigPath: 'NuGet.Config'

  - task: MSBuild@1
    inputs:
      solution: '$(unoSolution)'
      configuration: 'Release'
      msbuildArguments: '/p:JavaSdkDirectory="%JAVA_HOME%"'
