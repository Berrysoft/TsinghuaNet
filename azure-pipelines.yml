trigger:
- master

variables:
  sdkVersion: '3.0.100-preview6-012264'
  unoSolution: 'TsinghuaNet.Uno.sln'
  libProject: 'TsinghuaNet/TsinghuaNet.csproj'
  cliProject: 'TsinghuaNet.CLI/TsinghuaNet.CLI.csproj'
  wpfProject: 'TsinghuaNet.Eto/TsinghuaNet.Eto.Wpf/TsinghuaNet.Eto.Wpf.csproj'
  gtkProject: 'TsinghuaNet.Eto/TsinghuaNet.Eto.Gtk/TsinghuaNet.Eto.Gtk.csproj'
  macProject: 'TsinghuaNet.Eto/TsinghuaNet.Eto.Mac/TsinghuaNet.Eto.Mac.csproj'
  uwpProject: 'TsinghuaNet.Uno/TsinghuaNet.Uno.UWP/TsinghuaNet.Uno.UWP.csproj'

jobs:
- job: Linux_CLI
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - task: DotNetCoreInstaller@0
    displayName: 'Install .NET Core SDK 3.0'
    inputs:
      version: '$(sdkVersion)'

  - task: DotNetCoreCLI@2
    displayName: 'Restore project'
    inputs:
      projects: '$(cliProject)'
      command: restore
      feedsToUse: config
      nugetConfigPath: NuGet.Config
      
  - script: |
      wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
      sudo apt-add-repository "deb https://apt.llvm.org/xenial/ llvm-toolchain-xenial-3.9 main"
      sudo apt -o Acquire::AllowInsecureRepositories=true update && sudo apt-get install clang-3.9 lldb-3.9 comerr-dev krb5-multidev libgssrpc4 libkadm5clnt-mit9 libkadm5srv-mit9 libkdb5-8 libkrb5-dev
      sudo ln /usr/lib/x86_64-linux-gnu/libgssapi_krb5.so.2 /usr/lib/libgssapi_krb5.so
    displayName: 'Install clang-3.7'

  - task: DotNetCoreCLI@2
    displayName: 'Publish project'
    inputs:
      projects: $(cliProject)
      command: publish
      publishWebProjects: false
      configuration: 'Release'
      arguments: '-r linux-x64 --output build/linux-x64'

  - script: strip build/linux-x64/TsinghuaNet.CLI/TsinghuaNet.CLI
    displayName: 'Strip'

  - script: rm build/linux-x64/TsinghuaNet.CLI/*.pdb
    displayName: 'Remove PDBs'

  - task: ArchiveFiles@2
    displayName: 'Archive'
    inputs:
      rootFolderOrFile: 'build/linux-x64/TsinghuaNet.CLI'
      includeRootFolder: false
      archiveType: 'tar'
      tarCompression: 'gz'
      archiveFile: '$(Build.ArtifactStagingDirectory)/TsinghuaNet.CLI.Linux64.tar.gz'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish'
    inputs:
      artifactName: 'publish'

- job: MacOS_CLI
  pool:
    vmImage: 'macOS-10.14'
  steps:
  - task: DotNetCoreInstaller@0
    displayName: 'Install .NET Core SDK 3.0'
    inputs:
      version: '$(sdkVersion)'

  - task: DotNetCoreCLI@2
    displayName: 'Restore project'
    inputs:
      projects: '$(cliProject)'
      command: restore
      feedsToUse: config
      nugetConfigPath: NuGet.Config

  - task: DotNetCoreCLI@2
    displayName: 'Publish project'
    inputs:
      projects: $(cliProject)
      command: publish
      publishWebProjects: false
      configuration: 'Release'
      arguments: '-r osx-x64 --output build/osx-x64'
  
  - script: strip build/osx-x64/TsinghuaNet.CLI/TsinghuaNet.CLI
    displayName: 'Strip'

  - script: rm build/osx-x64/TsinghuaNet.CLI/*.pdb
    displayName: 'Remove PDBs'

  - task: ArchiveFiles@2
    displayName: 'Archive'
    inputs:
      rootFolderOrFile: 'build/osx-x64/TsinghuaNet.CLI'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/TsinghuaNet.CLI.OSX64.zip'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish'
    inputs:
      artifactName: 'publish'

- job: Windows_CLI
  pool:
    vmImage: 'windows-2019'
  steps:
  - task: DotNetCoreInstaller@0
    displayName: 'Install .NET Core SDK 3.0'
    inputs:
      version: '$(sdkVersion)'

  - task: DotNetCoreCLI@2
    displayName: 'Restore project'
    inputs:
      projects: '$(cliProject)'
      command: restore
      feedsToUse: config
      nugetConfigPath: NuGet.Config

  - task: DotNetCoreCLI@2
    displayName: 'Publish project'
    inputs:
      projects: $(cliProject)
      command: publish
      publishWebProjects: false
      configuration: 'Release'
      arguments: '-r win-x64 --output build\win-x64'

  - script: del build\win-x64\TsinghuaNet.CLI\*.pdb
    displayName: 'Remove PDBs'

  - task: ArchiveFiles@2
    displayName: 'Archive'
    inputs:
      rootFolderOrFile: 'build\win-x64\TsinghuaNet.CLI'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)\TsinghuaNet.CLI.Win64.zip'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish'
    inputs:
      artifactName: 'publish'

- job: Windows_Eto
  pool:
    vmImage: 'windows-2019'
  steps:
  - task: DotNetCoreInstaller@0
    displayName: 'Install .NET Core SDK 3.0'
    inputs:
      version: '$(sdkVersion)'

  - task: DotNetCoreCLI@2
    displayName: 'Restore project'
    inputs:
      projects: '$(wpfProject)'
      command: restore
      feedsToUse: config
      nugetConfigPath: NuGet.Config
  
  - task: DotNetCoreCLI@2
    displayName: 'Publish project as net48'
    inputs:
      projects: $(wpfProject)
      command: publish
      publishWebProjects: false
      configuration: 'Release'
      arguments: '-r win-x64 -f net48 --output build\eto.wpf\net48'

  - script: del build\eto.wpf\net48\TsinghuaNet.Eto.Wpf\*.pdb
    displayName: 'Remove PDBs'

  - task: ArchiveFiles@2
    displayName: 'Archive'
    inputs:
      rootFolderOrFile: 'build\eto.wpf\net48\TsinghuaNet.Eto.Wpf'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)\TsinghuaNet.Eto.Wpf.Fx.zip'

  - task: DotNetCoreCLI@2
    displayName: 'Publish project as netcoreapp3.0 FDE'
    inputs:
      projects: $(wpfProject)
      command: publish
      publishWebProjects: false
      configuration: 'Release'
      arguments: '-r win-x64 -f netcoreapp3.0 --self-contained false --output build\eto.wpf\netcoreapp3.0\dep'

  - script: del build\eto.wpf\netcoreapp3.0\dep\TsinghuaNet.Eto.Wpf\*.pdb
    displayName: 'Remove PDBs'

  - task: ArchiveFiles@2
    displayName: 'Archive'
    inputs:
      rootFolderOrFile: 'build\eto.wpf\netcoreapp3.0\dep\TsinghuaNet.Eto.Wpf'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)\TsinghuaNet.Eto.Wpf.CoreFx.Dependent.zip'

  - task: DotNetCoreCLI@2
    displayName: 'Publish project as netcoreapp3.0 SCE'
    inputs:
      projects: $(wpfProject)
      command: publish
      publishWebProjects: false
      configuration: 'Release'
      arguments: '-r win-x64 -f netcoreapp3.0 --output build\eto.wpf\netcoreapp3.0\self'

  - script: del build\eto.wpf\netcoreapp3.0\self\TsinghuaNet.Eto.Wpf\*.pdb
    displayName: 'Remove PDBs'

  - task: ArchiveFiles@2
    displayName: 'Archive'
    inputs:
      rootFolderOrFile: 'build\eto.wpf\netcoreapp3.0\self\TsinghuaNet.Eto.Wpf'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)\TsinghuaNet.Eto.Wpf.CoreFx.Self.zip'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish'
    inputs:
      artifactName: 'publish'

- job: Linux_Eto
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - task: DotNetCoreInstaller@0
    displayName: 'Install .NET Core SDK 3.0'
    inputs:
      version: '$(sdkVersion)'

  - task: DotNetCoreCLI@2
    displayName: 'Restore project'
    inputs:
      projects: '$(gtkProject)'
      command: restore
      feedsToUse: config
      nugetConfigPath: NuGet.Config
  
  - task: DotNetCoreCLI@2
    displayName: 'Publish project as FDE'
    inputs:
      projects: $(gtkProject)
      command: publish
      publishWebProjects: false
      configuration: 'Release'
      arguments: '-r linux-x64 -c Release --self-contained false --output build/eto.gtk/dep'

  - script: rm build/eto.gtk/dep/TsinghuaNet.Eto.Gtk/*.pdb
    displayName: 'Remove PDBs'

  - task: ArchiveFiles@2
    displayName: 'Archive'
    inputs:
      rootFolderOrFile: 'build/eto.gtk/dep/TsinghuaNet.Eto.Gtk'
      includeRootFolder: false
      archiveType: 'tar'
      tarCompression: 'gz'
      archiveFile: '$(Build.ArtifactStagingDirectory)/TsinghuaNet.Eto.Gtk.Dependent.tar.gz'

  - task: DotNetCoreCLI@2
    displayName: 'Publish project as SCE'
    inputs:
      projects: $(gtkProject)
      command: publish
      publishWebProjects: false
      configuration: 'Release'
      arguments: '-r linux-x64 -c Release --output build/eto.gtk/self'

  - script: rm build/eto.gtk/self/TsinghuaNet.Eto.Gtk/*.pdb
    displayName: 'Remove PDBs'

  - task: ArchiveFiles@2
    displayName: 'Archive'
    inputs:
      rootFolderOrFile: 'build/eto.gtk/self/TsinghuaNet.Eto.Gtk'
      includeRootFolder: false
      archiveType: 'tar'
      tarCompression: 'gz'
      archiveFile: '$(Build.ArtifactStagingDirectory)/TsinghuaNet.Eto.Gtk.Self.tar.gz'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish'
    inputs:
      artifactName: 'publish'

- job: Windows_UWP
  pool:
    vmImage: 'windows-2019'
  steps:
  - task: NuGetToolInstaller@0
    displayName: 'Install NuGet 5.1.0'
    inputs:
      versionSpec: '5.1.0'
  
  - task: NuGetCommand@2
    displayName: 'Restore solution'
    inputs:
      restoreSolution: '$(unoSolution)'
      feedsToUse: config
      nugetConfigPath: 'NuGet.Config'

  - task: MSBuild@1
    displayName: 'Build app bundle'
    inputs:
      solution: '$(uwpProject)'
      configuration: 'Release'
      msbuildArguments: '/p:AppxBundlePlatforms="x86|x64" /p:AppxPackageDir="..\..\build\uwp\AppxPackages" /p:AppxBundle=Always /p:UapAppxPackageBuildMode=SideloadOnly'
  
  - pwsh: rm build/uwp/AppxPackages/*/*/ARM* -Force -Recurse
    displayName: 'Remove ARM/ARM64 dependencies'

  - task: ArchiveFiles@2
    displayName: 'Archive'
    inputs:
      rootFolderOrFile: 'build\uwp\AppxPackages'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)\TsinghuaNet.Uno.UWP.zip'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish'
    inputs:
      artifactName: 'publish'
